type Attachment {
  id: ID
  uri: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
  type: String
  path: [String]
  message: String
  context: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

interface Model {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type Mutation {
  signUp(input: SignUpInput!): SignUpEvent
  signIn(input: SignInInput!): SignInEvent
  createProduct(input: ProductInput!): ProductEvent
  updateProduct(input: ProductUpdateInput!): ProductEvent
}

type Product implements Model {
  id: ID
  name: String
  price: Float
  photo: Attachment
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductCollection {
  payload: [Product]
  hasMore: Boolean
}

type ProductEvent {
  payload: Product
  errors: [Error]
}

input ProductInput {
  name: String
  price: Float
  photo: Upload
}

input ProductUpdateInput {
  id: ID
  name: String
  price: Float
  photo: Upload
}

type Query {
  products(search: String, first: Int = 20, after: ID): ProductCollection
  users(first: Int = 20, after: ID): UserCollection
}

type Sign {
  token: String
  user: User
}

type SignInEvent {
  payload: Sign
  errors: [Error]
}

input SignInInput {
  email: String
  password: String
}

type SignUpEvent {
  payload: Sign
  errors: [Error]
}

input SignUpInput {
  name: String
  email: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Model {
  id: ID
  name: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCollection {
  payload: [User]
  hasMore: Boolean
}
